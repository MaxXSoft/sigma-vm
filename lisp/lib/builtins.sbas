# Implementations of builtin functions and utility functions.


  # Offsets of Lisp object fields.
#define OFFSET_KIND         0   // Kind.
#define OFFSET_VALUE        1   // Value or pointer.
#define OFFSET_NEXT         2   // Pointer to the next object.
#define OFFSET_MOD_HANDLE   3   // Module handle (for lambda object only).
#define OFFSET_CAPTURES     4   // Captured variables (for lambda object only).

  # Lisp object kinds.
#define OBJ_NUM     0   // Number.
#define OBJ_STR     1   // String.
#define OBJ_SYM     2   // Symbol.
#define OBJ_LIST    3   // List.
#define OBJ_LAMBDA  4   // Lambda.

  # ID and name of builtin functions.
#define BUILTIN_ATOM(e)   e(atom,           1)
#define BUILTIN_NUMBER(e) e(number,         2)
#define BUILTIN_EQUAL(e)  e(equal,          3)
#define BUILTIN_CAR(e)    e(car,            4)
#define BUILTIN_CDR(e)    e(cdr,            5)
#define BUILTIN_CONS(e)   e(cons,           6)
#define BUILTIN_LIST(e)   e(list,           7)
#define BUILTIN_ADD(e)    e(builtin_add,    8)
#define BUILTIN_SUB(e)    e(builtin_sub,    9)
#define BUILTIN_MUL(e)    e(builtin_mul,    10)
#define BUILTIN_DIV(e)    e(builtin_div,    11)
#define BUILTIN_GT(e)     e(builtin_gt,     12)
#define BUILTIN_LT(e)     e(builtin_lt,     13)
#define BUILTIN_GE(e)     e(builtin_ge,     14)
#define BUILTIN_LE(e)     e(builtin_le,     15)
#define BUILTIN_EQ(e)     e(builtin_eq,     16)
#define BUILTIN_PRINT(e)  e(builtin_print,  17)

  # Creates a new Lisp object with a specific,
  # leaves the value field uninitialized.
#define NEW_OBJ(obj, kind)  \
  newoc obj                 \
  dup                       \
  pushu kind                \
  stdo  OFFSET_KIND         \
  dup                       \
  pushu 0                   \
  stdo  OFFSET_NEXT

  # Defines a function that creates an object with a specific kind.
#define DEF_NEW_OBJ(name, obj, kind)  \
new_##name:                           \
  NEW_OBJ(obj, kind)                  \
  dups1                               \
  swap                                \
  stdo  OFFSET_VALUE                  \
  ret                                 \
new_##name##_end:

  # Creates a new builtin object.
#define NEW_BUILTIN(name, obj_id) \
  pushu name##_impl               \
  call  new_builtin               \
  stg   obj_id

  # Declares a new builtin function.
#define DECL_BUILTIN(name, obj_id)      \
name:                                   \
  ldg   obj_id                          \
  ret                                   \
name##_end:                             \
  .section exports                      \
  .export #name, name, name##_end, 0, 1 \
  .section insts                        \
name##_impl:

  .section insts
  # Store the handle of the current module to global variable.
  stg   0
  # Initialize builtin function objects.
  BUILTIN_ATOM(NEW_BUILTIN)
  BUILTIN_NUMBER(NEW_BUILTIN)
  BUILTIN_EQUAL(NEW_BUILTIN)
  BUILTIN_CAR(NEW_BUILTIN)
  BUILTIN_CDR(NEW_BUILTIN)
  BUILTIN_CONS(NEW_BUILTIN)
  BUILTIN_LIST(NEW_BUILTIN)
  BUILTIN_ADD(NEW_BUILTIN)
  BUILTIN_SUB(NEW_BUILTIN)
  BUILTIN_MUL(NEW_BUILTIN)
  BUILTIN_DIV(NEW_BUILTIN)
  BUILTIN_GT(NEW_BUILTIN)
  BUILTIN_LT(NEW_BUILTIN)
  BUILTIN_GE(NEW_BUILTIN)
  BUILTIN_LE(NEW_BUILTIN)
  BUILTIN_EQ(NEW_BUILTIN)
  BUILTIN_PRINT(NEW_BUILTIN)
  ret


  # Entry of all function calls.
  #
  # Stack layout:
  # * s0 (TOS): number of arguments.
  # * s1: the Lisp object to be invoked.
  # * s2 ...: arguments of the invocation.
invoke:
  # check if object is a lambda
  swap
  dup
  lddo  OFFSET_KIND
  pushu OBJ_LAMBDA
  eq
  bz    1f
  # setup stack
  stv   0
  ldv   0
  ldpo  OFFSET_CAPTURES
  swap
  ldv   0
  ldpo  OFFSET_MOD_HANDLE
  ldv   0
  lddo  OFFSET_VALUE      # function PC
  # Stack layout after entered the target function:
  # * s0 (TOS): number of arguments.
  # * s1: array of captured arguments.
  # * s2 ...: other arguments.
  callexts
  ret
1:
  # object is not callable
  lac   not_callable
  jmp   panic
invoke_end:


  # Panics and abort.
  #
  # Stack layout:
  # * s0 (TOS): error message string pointer.
panic:
  lac   fatal
  call  eprint
  call  eprint
  sys   12
panic_end:


  # Prints string to standard error.
  #
  # Stack layout:
  # * s0 (TOS): error message string pointer.
eprint:
  dup
  pushu 8
  add
  swap
  lddo  0
  sys   10
  pop
  ret


  # Prints string to standard output.
  #
  # Stack layout:
  # * s0 (TOS): error message string pointer.
print:
  dup
  pushu 8
  add
  swap
  lddo  0
  sys   9
  pop
  ret


  # Checks the number of arguments, panics if mismatch.
  #
  # Stack layout:
  # * s0 (TOS): expected argument number.
  # * s1: actual argument number.
check_nargs:
  eq
  bnz   1f
  lac   nargs_mismatch
  jmp   panic
1:
  ret
check_nargs_end:


  # Creates a number object.
  #
  # Stack layout:
  # * s0 (TOS): a double.
DEF_NEW_OBJ(num, object, OBJ_NUM)


  # Creates a string object.
  #
  # Stack layout:
  # * s0 (TOS): a string pointer.
DEF_NEW_OBJ(str, ptr_object, OBJ_STR)


  # Creates a symbol object.
  #
  # Stack layout:
  # * s0 (TOS): a string pointer.
DEF_NEW_OBJ(sym, ptr_object, OBJ_SYM)


  # Creates a list object.
  #
  # Stack layout:
  # * s0 (TOS): number of list elements.
  # * s1: list elements n - 1.
  # * ...
  # * s{n}: list elements 0.
new_list:
  # construct linked list
  pushu 0
  swap
  bznp  2f
1:
  stv   0
  swap
  dups1
  swap
  stdo  OFFSET_NEXT
  ldv   0
  loop  1b
2:
  # create new object
  NEW_OBJ(ptr_object, OBJ_LIST)
  dups1
  swap
  stdo  OFFSET_VALUE
  ret
new_list_end:


  # Creates a lambda object.
  #
  # Stack layout:
  # * s0 (TOS): number of arguments.
  # * s1: captured variable 0.
  # * ...
  # * s{n}: captured variable n - 1.
  # * s{n + 1}: function PC.
  # * s{n + 2}: module handle.
new_lambda:
  # check argument number
  pushu 2
  sub
  bznp  2f
  # create captured variable array
  dup
  newac ptr
  dup
  stv   0
  stv   1
  # store variables to array
1:
  swap
  ldv   0
  swap
  std
  ldv   0
  pushu 8
  add
  stv   0
  loop  1b
  ldv   1
  jmp   3f
2:
  pushu 0
3:
  # create new object
  NEW_OBJ(func_object, OBJ_LAMBDA)
  dups1
  swap
  stdo  OFFSET_CAPTURES
  dups1
  swap
  stdo  OFFSET_VALUE
  dups1
  swap
  stdo  OFFSET_MOD_HANDLE
  ret
new_lambda_end:


  # Creates a lambda object of a given builtin function.
  #
  # Stack layout:
  # * s0 (TOS): builtin function PC.
new_builtin:
  NEW_OBJ(func_object, OBJ_LAMBDA)
  dup
  ldg   0
  stdo  OFFSET_MOD_HANDLE
  dup
  pushu 0
  stdo  OFFSET_CAPTURES
  dups1
  swap
  stdo  OFFSET_VALUE
  ret


  # Creates a boolean object.
  #
  # Stack layout:
  # * s0 (TOS): boolean, 0 for false, otherwise true.
new_bool:
  bz    1f
  lac   true
  jmp   new_sym
1:
  lac   false
  jmp   new_sym


  # Converts the given object to a boolean.
  #
  # Stack layout:
  # * s0 (TOS): a Lisp object.
to_bool:
  dup
  lddo  OFFSET_KIND
  pushu OBJ_SYM
  eq
  bz    2f
  dup
  ldpo  OFFSET_VALUE
  lac   true
  sys   13
  bznp  1f
  ret
1:
  ldpo  OFFSET_VALUE
  lac   false
  sys   13
  bz    2f
  pushu 0
  ret
2:
  lac   expected_bool
  jmp   panic
to_bool_end:


  # Returns a list if the given object is a list object,
  # otherwise panics.
  #
  # Stack layout:
  # * s0 (TOS): a Lisp object.
unwrap_list:
  dup
  lddo  OFFSET_KIND
  pushu OBJ_LIST
  eq
  bz    1f
  ldpo  OFFSET_VALUE
  ret
1:
  lac   expected_list
  jmp   panic


  # Panics if the given list is empty.
  #
  # Stack layout:
  # * s0 (TOS): a list (not a list object).
expect_non_empty:
  bznp  1f
  ret
1:
  lac   expected_non_empty_list
  jmp   panic


  # Creates a shallow copy of the given object.
  #
  # Stack layout:
  # * s0 (TOS): a Lisp object.
shallow_copy:
  # get field next
  dup
  ldpo  OFFSET_NEXT
  swap
  # get field kind and store
  dup
  lddo  OFFSET_KIND
  stv   0
  # check if is a lambda
  ldv   0
  pushu OBJ_LAMBDA
  ne
  bz    3f
  # check if is a number
  ldv   0
  pushu OBJ_NUM
  ne
  bz    1f
  # get field pointer and create pointer object
  ldpo  OFFSET_VALUE
  newoc ptr_object
  jmp   2f
1:
  # get field value and create object
  lddo  OFFSET_VALUE
  newoc object
2:
  # store fields
  dups1
  swap
  stdo  OFFSET_VALUE
  dups1
  swap
  stdo  OFFSET_NEXT
  dup
  ldv   0
  stdo  OFFSET_KIND
  ret
3:
  # get field value, module handle and captured variables
  dup
  lddo  OFFSET_VALUE
  swap
  dup
  ldpo  OFFSET_MOD_HANDLE
  swap
  ldpo  OFFSET_CAPTURES
  # create function object
  newoc func_object
  # store fields
  dups1
  swap
  stdo  OFFSET_CAPTURES
  dups1
  swap
  stdo  OFFSET_MOD_HANDLE
  dups1
  swap
  stdo  OFFSET_VALUE
  dups1
  swap
  stdo  OFFSET_NEXT
  dup
  ldv   0
  stdo  OFFSET_KIND
  ret


  # Returns a number if the given object is a number object,
  # otherwise panics.
  #
  # Stack layout:
  # * s0 (TOS): a Lisp object.
unwrap_num:
  dup
  lddo  OFFSET_KIND
  pushu OBJ_NUM
  eq
  bz    1f
  lddo  OFFSET_VALUE
  itd
  ret
1:
  lac   expected_num
  jmp   panic


  # Checks if the given two objects are equal.
  #
  # Stack layout:
  # * s0 (TOS): a Lisp object.
  # * s1: another Lisp object.
is_object_equal:
  sta   1
  # check kind
  ldv   0
  lddo  OFFSET_KIND
  dup
  stv   2
  ldv   1
  lddo  OFFSET_KIND
  eq
  bz    3f
  # get values
  ldv   0
  ldpo  OFFSET_VALUE
  ldv   1
  ldpo  OFFSET_VALUE
  # check if is number
  ldv   2
  pushu OBJ_NUM
  eq
  bz    1f
  eq
  ret
1:
  # check if is list
  ldv   2
  pushu OBJ_LIST
  eq
  bz    2f
  # check if there is a value is zero
  dups1
  pushu 0
  eq
  swap
  dups1
  pushu 0
  eq
  or
  bz    1f
  eq
  ret
1:
  # check recursively
  jmp   is_object_equal
2:
  # check if is lambda
  ldv   2
  pushu OBJ_LAMBDA
  eq
  bz    1f
  eq
  ldv   0
  ldpo  OFFSET_MOD_HANDLE
  ldv   1
  ldpo  OFFSET_MOD_HANDLE
  eq
  and
  ret
1:
  # is string or symbol, just check strings
  sys   13
  ret
3:
  pushu 0
  ret


  # Prints the given Lisp object.
  #
  # Stack layout:
  # * s0 (TOS): a Lisp object.
print_obj:
  # get value
  dup
  ldpo  OFFSET_VALUE
  swap
  # handle by kind
  dup
  lddo  OFFSET_KIND
  stv   0
  stv   1
  # check if is number
  ldv   0
  pushu OBJ_NUM
  eq
  bz    1f
  itd
  sys   16
  jmp   print
1:
  # check if is string
  ldv   0
  pushu OBJ_STR
  eq
  bz    1f
  lac   quote
  call  print
  call  print
  lac   quote
  jmp   print
1:
  # check if is symbol
  ldv   0
  pushu OBJ_SYM
  eq
  bz    1f
  jmp   print
1:
  # check if is list
  ldv   0
  pushu OBJ_LIST
  eq
  bz    1f
  lac   left_paren
  call  print
  bznp  2f
3:
  dup
  call  print_obj
  ldpo  OFFSET_NEXT
  bznp  2f
  lac   space
  call  print
  jmp   3b
2:
  lac   right_paren
  jmp   print
1:
  # must be a lambda
  lac   lambda_header
  call  print
  ldv   1
  ldpo  OFFSET_MOD_HANDLE
  pushu 16
  sys   14
  call  print
  lac   lambda_mid
  call  print
  pushu 10
  sys   14
  call  print
  lac   lambda_end
  jmp   print


  # Builtin function `atom?`.
BUILTIN_ATOM(DECL_BUILTIN)
  # check argument number
  pushu 2
  call  check_nargs
  pop
  # check if is an atom
  lddo  OFFSET_KIND
  pushu OBJ_LIST
  ne
  jmp   new_bool


  # Builtin function `number?`.
BUILTIN_NUMBER(DECL_BUILTIN)
  # check argument number
  pushu 2
  call  check_nargs
  pop
  # check if is a number
  lddo  OFFSET_KIND
  pushu OBJ_NUM
  eq
  jmp   new_bool


  # Builtin function `eq?`.
BUILTIN_EQUAL(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  call  is_object_equal
  jmp   new_bool


  # Builtin function `car`.
BUILTIN_CAR(DECL_BUILTIN)
  # check argument number
  pushu 2
  call  check_nargs
  pop
  # get the list
  call  unwrap_list
  jmp   expect_non_empty


  # Builtin function `cdr`.
BUILTIN_CDR(DECL_BUILTIN)
  # check argument number
  pushu 2
  call  check_nargs
  pop
  # get tail of the list
  call  unwrap_list
  call  expect_non_empty
  NEW_OBJ(ptr_object, OBJ_LIST)
  dups1
  swap
  ldpo  OFFSET_NEXT
  stdo  OFFSET_VALUE
  ret


  # Builtin function `cons`.
BUILTIN_CONS(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  # get the list
  call  unwrap_list
  # create a shallow copy of the first argument
  swap
  call  shallow_copy
  # append the second argument to the copied object
  dups1
  swap
  stdo  OFFSET_NEXT
  # create a new list
  NEW_OBJ(ptr_object, OBJ_LIST)
  dups1
  swap
  stdo  OFFSET_VALUE
  ret


  # Builtin function `list`.
BUILTIN_LIST(DECL_BUILTIN)
  pushu 1
  sub
  swap
  pop
  # construct linked list (shallow copy)
  pushu 0
  swap
  bznp  2f
1:
  stv   0
  swap
  call  shallow_copy
  dups1
  swap
  stdo  OFFSET_NEXT
  ldv   0
  loop  1b
2:
  # create new object
  NEW_OBJ(ptr_object, OBJ_LIST)
  dups1
  swap
  stdo  OFFSET_VALUE
  ret


  # Builtin function `+`.
BUILTIN_ADD(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  # perform add
  call  unwrap_num
  swap
  call  unwrap_num
  addd
  jmp   new_num


  # Builtin function `-`.
BUILTIN_SUB(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  # perform sub
  call  unwrap_num
  swap
  call  unwrap_num
  swap
  subd
  jmp   new_num


  # Builtin function `*`.
BUILTIN_MUL(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  # perform mul
  call  unwrap_num
  swap
  call  unwrap_num
  muld
  jmp   new_num


  # Builtin function `/`.
BUILTIN_DIV(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  # perform div
  call  unwrap_num
  swap
  call  unwrap_num
  swap
  divd
  jmp   new_num


  # Builtin function `>`.
BUILTIN_GT(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  # perform gt
  call  unwrap_num
  swap
  call  unwrap_num
  ltd
  jmp   new_bool


  # Builtin function `<`.
BUILTIN_LT(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  # perform lt
  call  unwrap_num
  swap
  call  unwrap_num
  gtd
  jmp   new_bool


  # Builtin function `>=`.
BUILTIN_GE(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  # perform ge
  call  unwrap_num
  swap
  call  unwrap_num
  led
  jmp   new_bool


  # Builtin function `<=`.
BUILTIN_LE(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  # perform le
  call  unwrap_num
  swap
  call  unwrap_num
  ged
  jmp   new_bool


  # Builtin function `=`.
BUILTIN_EQ(DECL_BUILTIN)
  # check argument number
  pushu 3
  call  check_nargs
  pop
  # perform eq
  call  unwrap_num
  swap
  call  unwrap_num
  eq
  jmp   new_bool


  # Builtin function `print`.
BUILTIN_PRINT(DECL_BUILTIN)
  # check argument number
  pushu 2
  call  check_nargs
  pop
  dup
  call  print_obj
  lac   new_line
  jmp   print


  .section consts
fatal:
  .str  "FATAL: "
not_callable:
  .str  "object is not callable\n"
nargs_mismatch:
  .str  "number of arguments does not match\n"
expected_bool:
  .str  "expected a boolean\n"
expected_list:
  .str  "expected a list\n"
expected_non_empty_list:
  .str  "expected a non empty list\n"
expected_num:
  .str  "expected a number\n"
true:
  .str  "t"
false:
  .str  "f"
quote:
  .str  "\""
left_paren:
  .str  "("
space:
  .str  " "
right_paren:
  .str  ")"
lambda_header:
  .str  "<lambda at module 0x"
lambda_mid:
  .str  ", pc "
lambda_end:
  .str  ">"
new_line:
  .str  "\n"

object:
  .object 24, 8, [2]
ptr_object:
  .object 24, 8, [1, 2]
func_object:
  .object 40, 8, [2, 3, 4]
ptr:
  .object 8, 8, [0]


  .section exports
  .export "invoke", invoke, invoke_end, variadic, 0
  .export "panic", panic, panic_end, 1, 0
  .export "check_nargs", check_nargs, check_nargs_end, 2, 0
  .export "new_num", new_num, new_num_end, 1, 1
  .export "new_str", new_str, new_str_end, 1, 1
  .export "new_sym", new_sym, new_sym_end, 1, 1
  .export "new_list", new_list, new_list_end, variadic, 1
  .export "new_lambda", new_lambda, new_lambda_end, variadic, 1
  .export "to_bool", to_bool, to_bool_end, 1, 1
